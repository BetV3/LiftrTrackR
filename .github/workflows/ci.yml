name: LiftrTrackR CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            api/package-lock.json
            frontend/package-lock.json
      
      - name: Install API dependencies
        run: cd api && npm ci
      
      - name: Lint API
        run: cd api && npm run lint
      
      - name: Install Frontend dependencies
        run: cd frontend && npm ci
      
      - name: Lint Frontend
        run: cd frontend && npm run lint

  test-api:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: liftrtrackr_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json
      
      - name: Install API dependencies
        run: cd api && npm ci
      
      - name: Run API tests
        run: cd api && npm test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: liftrtrackr_test
          JWT_SECRET: test_secret_key
  
  test-frontend:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install Frontend dependencies
        run: cd frontend && npm ci
      
      - name: Run Frontend tests
        run: cd frontend && npm test
  
  test-plateaubreaker:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: services/plateaubreaker/requirements.txt
      
      - name: Install PlateauBreaker dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r services/plateaubreaker/requirements.txt
          pip install pytest
      
      - name: Run PlateauBreaker tests
        run: cd services/plateaubreaker && pytest
  
  build:
    runs-on: ubuntu-latest
    needs: [test-api, test-frontend, test-plateaubreaker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: ./api
          push: true
          tags: ghcr.io/${{ github.repository }}/api:latest
      
      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:latest
      
      - name: Build and push PlateauBreaker image
        uses: docker/build-push-action@v4
        with:
          context: ./services/plateaubreaker
          push: true
          tags: ghcr.io/${{ github.repository }}/plateaubreaker:latest 